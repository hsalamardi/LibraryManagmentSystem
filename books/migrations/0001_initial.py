# Generated by Django 5.2.5 on 2025-08-29 22:48

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("library_users", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Book",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "serial",
                    models.CharField(
                        help_text="Unique serial number for the book",
                        max_length=20,
                        unique=True,
                    ),
                ),
                ("shelf", models.CharField(help_text="Shelf location", max_length=20)),
                ("title", models.CharField(help_text="Book title", max_length=500)),
                (
                    "isbn",
                    models.CharField(
                        blank=True,
                        help_text="ISBN-13 format",
                        max_length=17,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True,
                        help_text="Barcode for scanning",
                        max_length=50,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "author",
                    models.CharField(help_text="Primary author(s)", max_length=500),
                ),
                ("publisher", models.CharField(blank=True, max_length=200, null=True)),
                ("publication_date", models.DateField(blank=True, null=True)),
                ("edition", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "pages",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("ar", "Arabic"),
                            ("fr", "French"),
                            ("es", "Spanish"),
                            ("de", "German"),
                            ("other", "Other"),
                        ],
                        default="en",
                        max_length=10,
                    ),
                ),
                (
                    "dewey_code",
                    models.CharField(
                        blank=True,
                        help_text="Dewey Decimal Classification",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("main_class", models.CharField(blank=True, max_length=100, null=True)),
                ("divisions", models.CharField(blank=True, max_length=100, null=True)),
                ("sections", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "cutter_author",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("volume", models.CharField(blank=True, max_length=50, null=True)),
                ("series", models.CharField(blank=True, max_length=200, null=True)),
                ("editor", models.CharField(blank=True, max_length=200, null=True)),
                ("translator", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "place_of_publication",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("website", models.URLField(blank=True, null=True)),
                ("source", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "cover_type",
                    models.CharField(
                        choices=[
                            ("hardcover", "Hardcover"),
                            ("paperback", "Paperback"),
                            ("spiral", "Spiral Bound"),
                            ("digital", "Digital"),
                        ],
                        default="paperback",
                        max_length=20,
                    ),
                ),
                (
                    "condition",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("poor", "Poor"),
                            ("damaged", "Damaged"),
                        ],
                        default="good",
                        max_length=20,
                    ),
                ),
                (
                    "copy_number",
                    models.PositiveIntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "cover_image",
                    models.ImageField(
                        blank=True,
                        help_text="Book cover image",
                        null=True,
                        upload_to="book_covers/",
                    ),
                ),
                ("book_summary", models.TextField(blank=True, null=True)),
                (
                    "contents",
                    models.TextField(
                        blank=True, help_text="Table of contents", null=True
                    ),
                ),
                (
                    "keywords",
                    models.TextField(
                        blank=True, help_text="Comma-separated keywords", null=True
                    ),
                ),
                ("is_available", models.BooleanField(default=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Book",
                "verbose_name_plural": "Books",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="Borrower",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("borrow_date", models.DateField(auto_now_add=True)),
                ("due_date", models.DateField()),
                ("return_date", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("borrowed", "Borrowed"),
                            ("returned", "Returned"),
                            ("overdue", "Overdue"),
                            ("lost", "Lost"),
                        ],
                        default="borrowed",
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "fine_amount",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="borrowings",
                        to="books.book",
                    ),
                ),
                (
                    "borrower",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="borrowed_books",
                        to="library_users.userprofileinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Book Borrowing",
                "verbose_name_plural": "Book Borrowings",
                "ordering": ["-borrow_date"],
            },
        ),
        migrations.CreateModel(
            name="BookReservation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reservation_date", models.DateTimeField(auto_now_add=True)),
                ("expiry_date", models.DateTimeField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("fulfilled", "Fulfilled"),
                            ("cancelled", "Cancelled"),
                            ("expired", "Expired"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservations",
                        to="books.book",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservations",
                        to="library_users.userprofileinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Book Reservation",
                "verbose_name_plural": "Book Reservations",
                "ordering": ["-reservation_date"],
                "unique_together": {("book", "user", "status")},
            },
        ),
    ]
