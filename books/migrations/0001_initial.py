# Generated by Django 5.2.5 on 2025-09-12 20:50

import colorfield.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("library_users", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Book",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "serial",
                    models.CharField(
                        help_text="Unique serial number for the book",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "shelf",
                    models.CharField(
                        db_index=True, help_text="Shelf location", max_length=20
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_index=True, help_text="Book title", max_length=500
                    ),
                ),
                (
                    "isbn",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="ISBN-13 format",
                        max_length=17,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Barcode for scanning",
                        max_length=50,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "author",
                    models.CharField(
                        db_index=True, help_text="Primary author(s)", max_length=500
                    ),
                ),
                ("publisher", models.CharField(blank=True, max_length=200, null=True)),
                ("publication_date", models.DateField(blank=True, null=True)),
                ("edition", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "pages",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("ar", "Arabic"),
                            ("fr", "French"),
                            ("es", "Spanish"),
                            ("de", "German"),
                            ("other", "Other"),
                        ],
                        db_index=True,
                        default="en",
                        max_length=10,
                    ),
                ),
                (
                    "dewey_code",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Dewey Decimal Classification",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "main_class",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, null=True
                    ),
                ),
                ("divisions", models.CharField(blank=True, max_length=100, null=True)),
                ("sections", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "cutter_author",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("volume", models.CharField(blank=True, max_length=50, null=True)),
                ("series", models.CharField(blank=True, max_length=200, null=True)),
                ("editor", models.CharField(blank=True, max_length=200, null=True)),
                ("translator", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "place_of_publication",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("website", models.URLField(blank=True, null=True)),
                ("source", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "cover_type",
                    models.CharField(
                        choices=[
                            ("hardcover", "Hardcover"),
                            ("paperback", "Paperback"),
                            ("spiral", "Spiral Bound"),
                            ("digital", "Digital"),
                        ],
                        default="paperback",
                        max_length=20,
                    ),
                ),
                (
                    "condition",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("poor", "Poor"),
                            ("damaged", "Damaged"),
                        ],
                        default="good",
                        max_length=20,
                    ),
                ),
                (
                    "copy_number",
                    models.PositiveIntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "cover_image",
                    models.ImageField(
                        blank=True,
                        help_text="Book cover image",
                        null=True,
                        upload_to="book_covers/",
                    ),
                ),
                ("book_summary", models.TextField(blank=True, null=True)),
                (
                    "contents",
                    models.TextField(
                        blank=True, help_text="Table of contents", null=True
                    ),
                ),
                (
                    "keywords",
                    models.TextField(
                        blank=True, help_text="Comma-separated keywords", null=True
                    ),
                ),
                ("is_available", models.BooleanField(db_index=True, default=True)),
                ("date_added", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Book",
                "verbose_name_plural": "Books",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(blank=True, max_length=100, unique=True)),
            ],
            options={
                "verbose_name_plural": "Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ThemeConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Theme name (e.g., 'Default', 'Dark Mode', 'University Blue')",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of this theme"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=False,
                        help_text="Set as the active theme for the system",
                    ),
                ),
                (
                    "primary_color",
                    colorfield.fields.ColorField(
                        default="#2563eb",
                        help_text="Main brand color used for buttons, links, and accents",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "primary_dark",
                    colorfield.fields.ColorField(
                        default="#1d4ed8",
                        help_text="Darker shade of primary color for hover states",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "primary_light",
                    colorfield.fields.ColorField(
                        default="#3b82f6",
                        help_text="Lighter shade of primary color for backgrounds",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "secondary_color",
                    colorfield.fields.ColorField(
                        default="#64748b",
                        help_text="Secondary color for less prominent elements",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "accent_color",
                    colorfield.fields.ColorField(
                        default="#f59e0b",
                        help_text="Accent color for highlights and special elements",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "success_color",
                    colorfield.fields.ColorField(
                        default="#10b981",
                        help_text="Color for success messages and positive actions",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "warning_color",
                    colorfield.fields.ColorField(
                        default="#f59e0b",
                        help_text="Color for warning messages and caution states",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "danger_color",
                    colorfield.fields.ColorField(
                        default="#ef4444",
                        help_text="Color for error messages and destructive actions",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "info_color",
                    colorfield.fields.ColorField(
                        default="#3b82f6",
                        help_text="Color for informational messages",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "background_primary",
                    colorfield.fields.ColorField(
                        default="#ffffff",
                        help_text="Main background color for pages",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "background_secondary",
                    colorfield.fields.ColorField(
                        default="#f8fafc",
                        help_text="Secondary background color for sections",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "background_dark",
                    colorfield.fields.ColorField(
                        default="#1e293b",
                        help_text="Dark background color for contrast areas",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "text_primary",
                    colorfield.fields.ColorField(
                        default="#1e293b",
                        help_text="Primary text color",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "text_secondary",
                    colorfield.fields.ColorField(
                        default="#64748b",
                        help_text="Secondary text color for less important text",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "text_muted",
                    colorfield.fields.ColorField(
                        default="#94a3b8",
                        help_text="Muted text color for hints and placeholders",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "text_white",
                    colorfield.fields.ColorField(
                        default="#ffffff",
                        help_text="White text color for dark backgrounds",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "border_color",
                    colorfield.fields.ColorField(
                        default="#e2e8f0",
                        help_text="Color for borders and dividers",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "border_light",
                    colorfield.fields.ColorField(
                        default="#f1f5f9",
                        help_text="Light border color",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "border_dark",
                    colorfield.fields.ColorField(
                        default="#cbd5e1",
                        help_text="Dark border color",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "card_background",
                    colorfield.fields.ColorField(
                        default="#ffffff",
                        help_text="Background color for cards and components",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "card_border",
                    colorfield.fields.ColorField(
                        default="#e2e8f0",
                        help_text="Border color for cards",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "card_shadow",
                    models.CharField(
                        default="0 4px 6px -1px rgb(0 0 0 / 0.1)",
                        help_text="CSS box-shadow value for cards",
                        max_length=100,
                    ),
                ),
                (
                    "button_radius",
                    models.CharField(
                        default="0.5rem",
                        help_text="Border radius for buttons (e.g., '0.5rem', '8px')",
                        max_length=20,
                    ),
                ),
                (
                    "navbar_background",
                    colorfield.fields.ColorField(
                        default="#ffffff",
                        help_text="Navigation bar background color",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "navbar_text",
                    colorfield.fields.ColorField(
                        default="#1e293b",
                        help_text="Navigation bar text color",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "navbar_hover",
                    colorfield.fields.ColorField(
                        default="#f1f5f9",
                        help_text="Navigation bar hover background color",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "footer_background",
                    colorfield.fields.ColorField(
                        default="#1e293b",
                        help_text="Footer background color",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "footer_text",
                    colorfield.fields.ColorField(
                        default="#94a3b8",
                        help_text="Footer text color",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "book_card_background",
                    colorfield.fields.ColorField(
                        default="#ffffff",
                        help_text="Background color for book cards",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "book_card_border",
                    colorfield.fields.ColorField(
                        default="#e2e8f0",
                        help_text="Border color for book cards",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "book_card_hover",
                    colorfield.fields.ColorField(
                        default="#f8fafc",
                        help_text="Hover background color for book cards",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "book_available_color",
                    colorfield.fields.ColorField(
                        default="#10b981",
                        help_text="Color indicator for available books",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "book_borrowed_color",
                    colorfield.fields.ColorField(
                        default="#f59e0b",
                        help_text="Color indicator for borrowed books",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "book_overdue_color",
                    colorfield.fields.ColorField(
                        default="#ef4444",
                        help_text="Color indicator for overdue books",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "dashboard_card_bg",
                    colorfield.fields.ColorField(
                        default="#ffffff",
                        help_text="Dashboard card background color",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "dashboard_stat_primary",
                    colorfield.fields.ColorField(
                        default="#2563eb",
                        help_text="Primary dashboard statistic color",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "dashboard_stat_success",
                    colorfield.fields.ColorField(
                        default="#10b981",
                        help_text="Success dashboard statistic color",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "dashboard_stat_warning",
                    colorfield.fields.ColorField(
                        default="#f59e0b",
                        help_text="Warning dashboard statistic color",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                (
                    "dashboard_stat_danger",
                    colorfield.fields.ColorField(
                        default="#ef4444",
                        help_text="Danger dashboard statistic color",
                        image_field=None,
                        max_length=25,
                        samples=None,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Theme Configuration",
                "verbose_name_plural": "Theme Configurations",
                "ordering": ["-is_active", "name"],
            },
        ),
        migrations.CreateModel(
            name="ThemePreset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "theme_data",
                    models.JSONField(
                        help_text="JSON data containing all theme color values"
                    ),
                ),
                (
                    "preview_image",
                    models.ImageField(
                        blank=True,
                        help_text="Preview image of this theme",
                        null=True,
                        upload_to="theme_previews/",
                    ),
                ),
                (
                    "is_built_in",
                    models.BooleanField(
                        default=False, help_text="Built-in themes cannot be deleted"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Theme Preset",
                "verbose_name_plural": "Theme Presets",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Borrower",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("borrow_date", models.DateField(auto_now_add=True, db_index=True)),
                ("due_date", models.DateField(db_index=True)),
                ("return_date", models.DateField(blank=True, db_index=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("borrowed", "Borrowed"),
                            ("returned", "Returned"),
                            ("overdue", "Overdue"),
                            ("lost", "Lost"),
                        ],
                        db_index=True,
                        default="borrowed",
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "fine_amount",
                    models.DecimalField(
                        db_index=True, decimal_places=2, default=0.0, max_digits=10
                    ),
                ),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="borrowings",
                        to="books.book",
                    ),
                ),
                (
                    "borrower",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="borrowed_books",
                        to="library_users.userprofileinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Book Borrowing",
                "verbose_name_plural": "Book Borrowings",
                "ordering": ["-borrow_date"],
            },
        ),
        migrations.CreateModel(
            name="BorrowRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("request_date", models.DateTimeField(auto_now_add=True)),
                (
                    "requested_duration_days",
                    models.PositiveIntegerField(
                        default=14, help_text="Number of days to borrow"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Approval"),
                            ("approved", "Approved"),
                            ("denied", "Denied"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes from requester",
                        null=True,
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True, help_text="Notes from librarian/admin", null=True
                    ),
                ),
                ("processed_date", models.DateTimeField(blank=True, null=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="borrow_requests",
                        to="books.book",
                    ),
                ),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_requests",
                        to="library_users.userprofileinfo",
                    ),
                ),
                (
                    "requester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="borrow_requests",
                        to="library_users.userprofileinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Borrow Request",
                "verbose_name_plural": "Borrow Requests",
                "ordering": ["-request_date"],
            },
        ),
        migrations.AddField(
            model_name="book",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="books",
                to="books.category",
            ),
        ),
        migrations.CreateModel(
            name="ReturnRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("request_date", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Approval"),
                            ("approved", "Approved"),
                            ("denied", "Denied"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes from requester",
                        null=True,
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True, help_text="Notes from librarian/admin", null=True
                    ),
                ),
                ("processed_date", models.DateTimeField(blank=True, null=True)),
                (
                    "borrowing",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="return_requests",
                        to="books.borrower",
                    ),
                ),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_return_requests",
                        to="library_users.userprofileinfo",
                    ),
                ),
                (
                    "requester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="return_requests",
                        to="library_users.userprofileinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Return Request",
                "verbose_name_plural": "Return Requests",
                "ordering": ["-request_date"],
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_email", models.EmailField(blank=True, max_length=254)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("approve", "Approve"),
                            ("deny", "Deny"),
                            ("borrow", "Borrow"),
                            ("return", "Return"),
                            ("reserve", "Reserve"),
                            ("admin_access", "Admin Access"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                ("old_values", models.JSONField(blank=True, null=True)),
                ("new_values", models.JSONField(blank=True, null=True)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("success", models.BooleanField(default=True)),
                ("error_message", models.TextField(blank=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Audit Log",
                "verbose_name_plural": "Audit Logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "timestamp"],
                        name="books_audit_user_id_7fbbeb_idx",
                    ),
                    models.Index(
                        fields=["action", "timestamp"],
                        name="books_audit_action_3105f0_idx",
                    ),
                    models.Index(
                        fields=["severity", "timestamp"],
                        name="books_audit_severit_1b14e6_idx",
                    ),
                    models.Index(
                        fields=["ip_address", "timestamp"],
                        name="books_audit_ip_addr_b7ce0a_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="BookReservation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reservation_date",
                    models.DateTimeField(auto_now_add=True, db_index=True),
                ),
                ("expiry_date", models.DateTimeField(db_index=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("fulfilled", "Fulfilled"),
                            ("cancelled", "Cancelled"),
                            ("expired", "Expired"),
                        ],
                        db_index=True,
                        default="active",
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservations",
                        to="books.book",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservations",
                        to="library_users.userprofileinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Book Reservation",
                "verbose_name_plural": "Book Reservations",
                "ordering": ["-reservation_date"],
                "unique_together": {("book", "user", "status")},
            },
        ),
        migrations.CreateModel(
            name="SecurityEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("failed_login", "Failed Login"),
                            ("account_locked", "Account Locked"),
                            ("suspicious_activity", "Suspicious Activity"),
                            ("rate_limit_exceeded", "Rate Limit Exceeded"),
                            ("unauthorized_access", "Unauthorized Access"),
                            ("password_change", "Password Change"),
                            (
                                "admin_privilege_escalation",
                                "Admin Privilege Escalation",
                            ),
                        ],
                        max_length=30,
                    ),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("details", models.JSONField(default=dict)),
                ("resolved", models.BooleanField(default=False)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_security_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Security Event",
                "verbose_name_plural": "Security Events",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["event_type", "timestamp"],
                        name="books_secur_event_t_e8a549_idx",
                    ),
                    models.Index(
                        fields=["ip_address", "timestamp"],
                        name="books_secur_ip_addr_07d125_idx",
                    ),
                    models.Index(
                        fields=["resolved", "timestamp"],
                        name="books_secur_resolve_7e019b_idx",
                    ),
                ],
            },
        ),
    ]
