"""
Django settings for nta_library project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import dj_database_url
from pathlib import Path

# Import Sentry only if available
try:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.celery import CeleryIntegration
    from sentry_sdk.integrations.redis import RedisIntegration
    SENTRY_AVAILABLE = True
except ImportError:
    SENTRY_AVAILABLE = False
try:
    import environ
    env = environ.Env(
        DEBUG=(bool, False),
        SECRET_KEY=(str, 'django-insecure-change-me-in-production'),
        DATABASE_URL=(str, 'sqlite:///db.sqlite3'),
    )
    # Read .env file if it exists locally, otherwise use environment variables from Cloud Build
    env_file = os.path.join(Path(__file__).resolve().parent.parent, '.env')
    if os.path.isfile(env_file):
        environ.Env.read_env(env_file)
except ImportError:
    # Fallback if django-environ is not installed
    class MockEnv:
        def __call__(self, key, default=None):
            return os.environ.get(key, default)
    env = MockEnv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')
STATIC_DIR = os.path.join(BASE_DIR, "static")
MEDIA_DIR = os.path.join(BASE_DIR, "media")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='django-insecure-6d)gf(=q3w$z0ew%gs9mbkz40zr@s-^q9x%5e)k(zhvy6oacx5')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG', default=True)

ALLOWED_HOSTS = env('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    # Django Admin UI
    'simpleui',
    'django.contrib.admin',
    
    # Django Core Apps
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Third-party apps
    'crispy_forms',
    # 'crispy_bootstrap5',  # Commented out due to import issues
    'widget_tweaks',
    'import_export',
    'rest_framework',
    'corsheaders',
    'colorfield',
    'axes',
    'django_extensions',
    
    # Local apps
    'books',
    'library_users',
]

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesStandaloneBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# Add debug toolbar for development
if DEBUG:
    INSTALLED_APPS += ['debug_toolbar']
    INTERNAL_IPS = ['127.0.0.1', 'localhost']

# Sites framework
SITE_ID = 1

# Crispy Forms
# CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"  # Commented out due to crispy_bootstrap5 import issue
# CRISPY_TEMPLATE_PACK = "bootstrap5"  # Commented out due to crispy_bootstrap5 import issue

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}

# Security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Session settings
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Account lockout settings (django-axes)
AXES_ENABLED = True
AXES_FAILURE_LIMIT = 5
AXES_COOLOFF_TIME = 1  # 1 hour
# AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP = True # Deprecated setting
AXES_RESET_ON_SUCCESS = True

# Sentry Configuration for Error Monitoring
SENTRY_DSN = env('SENTRY_DSN', default='')
if SENTRY_DSN and not DEBUG and SENTRY_AVAILABLE:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(
                transaction_style='url',
                middleware_spans=True,
                signals_spans=True,
                cache_spans=True,
            ),
            CeleryIntegration(monitor_beat_tasks=True),
            RedisIntegration(),
        ],
        # Performance Monitoring
        traces_sample_rate=0.1,  # 10% of transactions
        profiles_sample_rate=0.1,  # 10% of transactions for profiling
        
        # Error Filtering
        before_send=lambda event, hint: event if event.get('level') != 'info' else None,
        
        # Environment and Release Tracking
        environment=env('ENVIRONMENT', default='production'),
        release=env('RELEASE_VERSION', default='1.0.0'),
        
        # Additional Options
        send_default_pii=False,  # Don't send personally identifiable information
        attach_stacktrace=True,
        max_breadcrumbs=50,
    )

APPEND_SLASH = True

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add whitenoise for static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'axes.middleware.AxesMiddleware',
    'books.middleware.PerformanceMonitoringMiddleware',
]

# Add debug toolbar middleware for development
if DEBUG:
    MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True

# Email Configuration
EMAIL_BACKEND = env('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = env('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = env('EMAIL_PORT', default=587)
EMAIL_USE_TLS = env('EMAIL_USE_TLS', default=True)
EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default='noreply@library.com')

# Library Configuration
LIBRARY_NAME = env('LIBRARY_NAME', default='NTA Library')
LIBRARY_EMAIL = env('LIBRARY_EMAIL', default='library@nta.edu')
LIBRARY_PHONE = env('LIBRARY_PHONE', default='+1234567890')
LIBRARY_ADDRESS = env('LIBRARY_ADDRESS', default='123 Library Street, City, State 12345')

# Fine Configuration
DAILY_FINE_AMOUNT = float(env('DAILY_FINE_AMOUNT', default=1.00))
MAX_FINE_AMOUNT = float(env('MAX_FINE_AMOUNT', default=50.00))
BORROWING_PERIOD_DAYS = int(env('BORROWING_PERIOD_DAYS', default=14))
RESERVATION_PERIOD_DAYS = int(env('RESERVATION_PERIOD_DAYS', default=7))

# Notification Configuration
SEND_EMAIL_NOTIFICATIONS = env('SEND_EMAIL_NOTIFICATIONS', default=True)
SEND_SMS_NOTIFICATIONS = env('SEND_SMS_NOTIFICATIONS', default=False)
REMINDER_DAYS_BEFORE_DUE = int(env('REMINDER_DAYS_BEFORE_DUE', default=3))

# Celery Configuration
CELERY_BROKER_URL = env('REDIS_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = env('REDIS_URL', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'library.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'books': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'library_users': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

ROOT_URLCONF = 'nta_library.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR,],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                    'books.context_processors.theme_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'nta_library.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

# Database configuration
# Use DATABASE_URL environment variable if available, otherwise use SQLite
DATABASE_URL = env('DATABASE_URL', default='sqlite:///db.sqlite3')
DATABASES = {
    'default': dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=600,
        conn_health_checks=True,
    )
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

DATA_UPLOAD_MAX_NUMBER_FIELDS = 20000


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATICFILES_DIRS = [
    STATIC_DIR,
]

STATIC_URL = 'static/'

# Static files configuration for production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Enable WhiteNoise compression and caching
WHITENOISE_MIDDLEWARE_WHITELIST = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = DEBUG
WHITENOISE_COMPRESS = True

# Media files
MEDIA_URL = 'media/'
MEDIA_ROOT = MEDIA_DIR

# For production, consider using Cloud Storage
# if not DEBUG:
#     DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
#     GS_BUCKET_NAME = env('GS_BUCKET_NAME', default='')
#     GS_DEFAULT_ACL = 'publicRead'

LOGIN_URL = '/library_users/login/'
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#admin

SIMPLEUI_LOGO = "/static/images/nta.png"
ADMIN_SITE_HEADER = "NTA Library Administration"
ADMIN_SITE_TITLE = "NTA Library"


SIMPLEUI_CONFIG = {
    'system_keep':False,
    'menus': [{
        'name': 'Simpleui',
        'icon': 'fas fa-code',
        'url': 'https://gitee.com/tompeppa/simpleui'
    }, {
        'app': 'auth',
        'name': 'Permission',
        'icon': 'fas fa-group-shield',
        'models': [
                {
                    'name': 'groups',
                    'icon': 'fa fa-users-cog',
                    'url': 'auth/group/',
                },{
                    'name': 'users',
                    'icon': 'fa fa-user',
                    'url': 'auth/user/'
                }
                ]
    }, {
      	# Since 2021.02.01+ supports multi-level menus, models is the submenu name
        'name': 'NTA Library',
        'icon': 'fa fa-file',
        'models': [
          {
            'name': 'Library',
            # The fourth level is not supported, the element only supports level 3
            'models': [
              {
                'name': 'Books',
                'url': 'books/book/',
                'icon': 'fa fa-address-book',
                'newTab': True
              }, {
                'name': 'Borrowers',
                'url': 'books/borrower/',
                'icon': 'fa fa-address-card'
              },
            ]
          }, {
            'name': 'Contacts',
            'url': 'library_users/contact/',
            'icon': 'fa fa-comment'
	  }, {
            'name': 'Library more user info',
            'url': 'library_users/userprofileinfo/',
            'icon': 'fa fa-envelope'
        }]
    }]
}